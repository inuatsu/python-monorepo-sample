[project]
name = "pytest-common"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "common",
    "factory-boy>=3.3.1",
    "filelock>=3.16.1",
    "psutil>=6.1.0",
    "pytest>=8.3.3",
    "pytest-xdist>=3.6.1",
]

[project.entry-points.pytest11]
common = "pytest_common.plugin"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["pytest_common"]

[tool.uv.sources]
common = { path = "../common", editable = true }

[dependency-groups]
dev = [
    "mypy>=1.13.0",
    "poethepoet>=0.29.0",
    "pytest-cov>=6.0.0",
    "ruff>=0.7.2",
    "types-factory-boy>=0.4.1",
]

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["E", "F", "W", "I", "B"]

[tool.mypy]
ignore_missing_imports = true
plugins = ["sqlalchemy.ext.mypy.plugin", "pydantic.mypy"]

[tool.poe.tasks.test]
help = "Run pytest"
cmd = "python -m pytest"

[tool.pytest.ini_options]
addopts = "--cov=pytest_common --cov-report term-missing --cov-report html:coverage/htmlcov --cov-report xml:coverage/coverage.xml"
disable_test_id_escaping_and_forfeit_all_rights_to_community_support = true
testpaths = ["tests"]

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",
    "if self\\.debug",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if 0:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",
    ]
ignore_errors = true
precision = 2
skip_empty = true
omit = ["pytest_common/factories/**"]

